require 'rbconfig'

AZK_ROOT  = 'apache-zookeeper'
AZK_SRC   = File.join(AZK_ROOT, 'src')
AZK_C_SRC = File.join(AZK_SRC, 'c')

AZK_C_SRC_FILES = FileList["#{AZK_C_SRC}/{include,src}/**/*.{h,c}"]

LIB_ZK_SO = 'lib/libzookeeper_mt_gem.la'

GENERATED_DIR = File.join(AZK_C_SRC, 'generated')
CONFIGURE_PATH = File.join(AZK_C_SRC, 'configure')

file LIB_ZK_SO => CONFIGURE_PATH
file LIB_ZK_SO => AZK_C_SRC_FILES

file GENERATED_DIR do
  cd AZK_C_SRC do
    sh 'ant compile_jute'
  end
end

file CONFIGURE_PATH => GENERATED_DIR do
  cd AZK_C_SRC do
    sh 'autoreconf -if'
  end
end

namespace :azk do
  task :clean do
    cd AZK_C_SRC do
      if File.exists?('Makefile')
        sh 'make clean'
      end
    end
  end

  task :clobber => :clean do
    cd AZK_C_SRC do
      sh "git -Xd"
    end
  end

  task :build => LIB_ZK_SO do
    sh "ruby extconf.rb"
  end
end

task :clean   => 'azk:clean'
task :clobber => 'azk:clobber'

namespace :zkrb do
  task :clean do
    if File.exists?('Makefile')
      sh 'make clean'
      rm 'Makefile' # yep, regenerate this
    else
      $stderr.puts "nothing to clean, no Makefile"
    end
  end

  task :clobber => :clean do
    rm_rf %w[Makefile c lib bin include]
  end
end

task :clean   => 'zkrb:clean'
task :clobber => 'zkrb:clobber'

GENERATE_GVL_CODE_RB = 'generate_gvl_code.rb'

# file 'c' do
#   if tarball = Dir['zkc-*.tar.gz'].first
#     sh "tar -zxf #{tarball}"
#   else
#     raise "couldn't find the tarball! wtf?!"
#   end
# end

file GENERATE_GVL_CODE_RB 

file 'zkrb_wrapper.c' => GENERATE_GVL_CODE_RB do
  sh "ruby generate_gvl_code.rb code"
end

file 'zkrb_wrapper.h' => GENERATE_GVL_CODE_RB do
  sh "ruby generate_gvl_code.rb headers"
end

ZKRB_WRAPPER = %w[zkrb_wrapper.c zkrb_wrapper.h]

task :wrappers => ZKRB_WRAPPER

file 'Makefile' => 'azk:build'

task :build => [ZKRB_WRAPPER, 'Makefile'].flatten do
  sh 'make'
end

task :default => :build

